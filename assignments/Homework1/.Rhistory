for (i in s) {
if (i < width) {
cat(rep(blank, (width - 2) / 2), rep(star, i), rep(blank, (width -2) / 2), "\n")
} else cat(rep(star, i))
}
width <- 10
s <- seq(from = 2, to = 10, by = 2)
for (i in s) {
if (i < width) {
cat(rep(blank, (width - i) / 2), rep(star, i), rep(blank, (width -i) / 2), "\n")
} else cat(rep(star, i))
}
doubleIt = function(x = 1) {
x <- 2 * x
return(x)
}
doubleIt()
doubleIt(x = 12)
doubleIt(3)
doubleIt = function(x) {
x <- 2 * x
return(x)
}
doubleIt()
doubleIt(x = 12)
doubleIt(3)
doubleIt = function(x = 2) {
x <- 2 * x
return(x)
}
doubleIt()
doubleIt(x = 12)
doubleIt(3)
doubleIt(2, 10)
multipleReturn = function (x = 6, y = 1) {
variabley <- x + y
variablex <- 10
z <- cbind(variablex, variabley)
return z
}
multipleReturn = function (x = 6, y = 1) {
variabley <- x + y
variablex <- 10
z <- cbind(variablex, variabley)
return(z)
}
z <- multipleReturn()
z
multipleReturn(4, 10)
apply(iris[, 1:4], 2, mean)
help(apply)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
ftimes = function(x = 1) {
len <- 12
for (i in 1 : len) {
cat(x, " * ", i, " = ", x * i, "\n")
}
}
ftimes(7)
meanData = function(x) {
cat(mean(x))
}
v <- c(1, 2, 3, 4, 5)
meanData(v)
w <- vector(mode = "numeric", length = 21)
x[21] <- 0
x
w <- vector(mode = "numeric", length = 21)
w
x[21] <- 0
x
x <- stats::rnorm(20)
x[21] <- 0
x
for(i in 1:21){
if(x[i]<0) w[i]=0
if(x[i]>0) w[i]=1
if( isTRUE(all.equal(x[i],0, tol = 0.1))) w[i] <- 100
}
x; w; i
myx <- 10
if(myx>2){
myy<-2
}else{
myy<-0
}
f <- factor(sample(letters[1:5], 10, replace=TRUE))
f
for( i in unique(f) ) print(i)
i
unique(f)
i
for(i in seq_along(myLetters)){ #seq_along(x)=> 1:length(x)
print(myLetters[i])
}
sort(f)
for (myLetter in letters) print(myLetter)
mylist <- c(1,2,3,4,5,6,7,NA)
mylist < 4
which(mylist < 4)
x <- stats::rnorm(20)
x < 1
x[x > -1]
x[x > -1]
which(x > -1)
x[which(x > -1)]
isTRUE(all.equal(m, n))
m <- x[x > -1]
which(x > -1)
n <- x[which(x > -1)]
isTRUE(all.equal(m, n))
myNA <-c(1,2,3)
myNA[7]<- 7
myNA    # entries 4,5,and 6 are NA
myInf <- 1/0
myZero <-1/Inf
myNaN <-0/0
myInf>=myZero  #true
myInf>=myNaN   #NA
myNA > 2
myNA == "NA"
myNA >=myNaN
X1 <- 4 - 2
Y1 <- 3 - 1
X1 == Y1
class(X1)
X1 <- 4L - 2L
Y1 <- 3L - 1L
X1 == Y1
class(X1)
myx<- as.integer(7)
class(myx) #[1] "integer"
X1 <- .4 - .2
Y1 <- .3 - .1
X1 == Y1
?gettextf
?sprintf
sprintf("%1.10f",X1)
myName <- "Joe"
yourName <- "Sam"
myName==yourName  #false
myName==myName    #true
myName <= yourName #true
yourName <= myName #false
myColor <- factor(c("red","green","red","red","green"))
myColor
myColorOrdered <- factor(myColor, levels=c("red","green"),ordered=TRUE)
myColorOrdered
myColorOrdered <= "red"
summary(myColorOrdered)
x <- 1:5
y <- seq(from = 1, to = 10, by = 2)
z <- rep(1,5)
x;y;z
w<- x==y
w
if(x>3){
x<-0
}
x
x <- 1:5
x;y;z
if(x>3){
x<-0
}
x
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Week3/2:3")
rm(list=ls())
search()
library(ggplot2)
search()
rm(x)
mean(x=1:10)  # function is defined and returns 5.5
mean(x <- 1:10)
rm(x)
mean(x=1:10)  # function is defined and returns 5.5
x
mean(x <- 1:10)
x # [1] 1 2 3 4 5 6 7 8 9 10
fscope <- function(x) {     # x is the formal argument to fscope
print(paste("y = ",y))    # here the value of free variable
# y is picked up from the global environment
y <- 2*x                  # y is now a local variable
w <- 3*x                  # w is a local variable
print(paste("w = ",w))
print(paste("x = ",x))
print(paste("y = ",y))
print(paste("z = ",z))    # is a free variable
}
ls(environment(fscope))
x <- 1
y <- 7
z <- 3
mean(x <- 1:10)
x # [1] 1 2 3 4 5 6 7 8 9 10
fscope <- function(x) {     # x is the formal argument to fscope
print(paste("y = ",y))    # here the value of free variable
# y is picked up from the global environment
y <- 2*x                  # y is now a local variable
w <- 3*x                  # w is a local variable
print(paste("w = ",w))
print(paste("x = ",x))
print(paste("y = ",y))
print(paste("z = ",z))    # is a free variable
}
ls(environment(fscope))
x <- 1
y <- 7
z <- 3
rm(w)         # w is NOT in the environment
fscope(x)
y
ls(environment(fscope))
y  #[1] 7
get("y",environment(fscope))
fscope <- function(x) {     # x is the formal argument to fscope
print(paste("y = ",y))    # here the value of free variable
# y is picked up from the global environment
y <- 2*x                  # y is now a local variable
w <- 3*x                  # w is a local variable
print(paste("w = ",w))
print(paste("x = ",x))
print(paste("y = ",y))
print(paste("y = ",y))
print(paste("z = ",z))    # is a free variable
}
ls(environment(fscope))
x <- 1
y <- 7
z <- 3
rm(w)         # w is NOT in the environment
fscope(x)
y
ls(environment(fscope))
y  #[1] 7
get("y",environment(fscope))
y   #[1] 7
rm(y)  # remove y from the environment and try it again
ls(environment(fscope))
ax <- 1
fpoint <- function(ax) return(TRUE)
rm(y)  # remove y from the environment and try it again
fscope(x)
help("environment")
fpoint <- function(ax) return(TRUE)
fpoint <- fpoint(ax <- ax + 1)
rm(ax)
fpoint <- function(ax) return(TRUE)
ax
fpoint <- fpoint(ax <- ax + 1)
ax <- ax + 1
fpoint <- fpoint(ax <- ax + 1)
fpoint <- function(ax) return(TRUE)
fpoint <- fpoint(ax <- ax + 1)
ax
set.seed(pi)
myY <- 1
myFun <- function(myX){   #myX = 4
myY <- 2                #myY = 2 environment inside myFun
myY + thatFun(myX)      # myFun returns 2 + 5 = 7
}
thatFun <- function(myX){  #myX = 4 myY = 1
myX+myY                  # myY is picked up from the defining environment of thatFun parent
# thatFun returns 5
}
myFun(4)   #[1] 7
ls(environment(thatFun))
get("myY",environment(thatFun))
search()
require(graphics)
fancySin <-function(amp, phase){
chippy <- function(x) amp*sin(phase*x)
}
tall  <-  fancySin(4,1)
short <-  fancySin(0.5,1)
fast  <-  fancySin(3, 3*pi)
View(tall)
par(new=TRUE)
search()
oldpar <- par(no.readonly=TRUE) # record current setting
par(ask=TRUE)
require(graphics)
fancySin <-function(amp, phase){
chippy <- function(x) amp*sin(phase*x)
}
tall  <-  fancySin(4,1)
short <-  fancySin(0.5,1)
fast  <-  fancySin(3, 3*pi)
par(new=TRUE)
curve(tall,  from = -2*pi, to = 2*pi,ylim = c(-4,4),ylab ="    " )# ylim <- )
curve(tall,  from = -2*pi, to = 2*pi,ylim = c(-4,4),ylab ="    " )# ylim <- )
par(new=TRUE)
curve(short, from = -2*pi, to = 2*pi,ylim = c(-4,4), col = "red" ,ylab ="    ", new = FALSE)# ylim <- c(-4,4))
par(new=TRUE)
curve(fast,  from = -2*pi, to = 2*pi,ylim = c(-4,4), col="blue", ylab = "black = tall; red = short; blue = fast",new = FALSE)# ylim <- c(-4,4))
par(new=FALSE)
oldpar <- par(no.readonly=TRUE) # record current setting
par(ask=TRUE)
require(graphics)
fancySin <-function(amp, phase){
chippy <- function(x) amp*sin(phase*x)
}
tall  <-  fancySin(4,1)
short <-  fancySin(0.5,1)
fast  <-  fancySin(3, 3*pi)
par(new=TRUE)
curve(tall,  from = -2*pi, to = 2*pi,ylim = c(-4,4),ylab ="    " )# ylim <- )
par(new=TRUE)
curve(short, from = -2*pi, to = 2*pi,ylim = c(-4,4), col = "red" ,ylab ="    ", new = FALSE)# ylim <- c(-4,4))
par(new=TRUE)
curve(fast,  from = -2*pi, to = 2*pi,ylim = c(-4,4), col="blue", ylab = "black = tall; red = short; blue = fast",new = FALSE)# ylim <- c(-4,4))
par(new=FALSE)
par(oldpar) # restore settings
ls(environment(tall))
get("amp", environment(short))
ls(environment(fast))
get("phase", environment(fast))
?scale
prostate<-read.csv("ProstateCancerDataESL.csv", sep=",",header=T)
myurl <- "http://patriciahoffmanphd.com/resources/data/"
prostate<-read.csv(paste(myurl,"ProstateCancerDataESL.csv",sep=""), sep=",",header=T)
prostate[1:3,]
names(prostate)
dim(prostate)
isTRUE(all.equal(prostate$age,prostate[,3]))
X <- prostate[,1:8]
class(X)
class(prostate)
prostateScale <- scale(X, center = TRUE, scale = TRUE)
prostateScale[1:3,]
class(prostateScale)
userScale <- function(x, numColm) {
#demean x and bring to unit variance
for(i in 1:numColm){
m <- sum(x[,i])
m <- m/length(x[,i])
x[,i] <- x[,i]-m
v <- var(x[,i])
if(v < 0.0000001) v <- 0.0000001    # include for case v = 0
x[,i] <- x[,i]/sqrt(v)	# don't want a zero divide
}
return(x)
}
prostateUser <- userScale(X,8)
prostateUser[1:3,]
class(prostateUser)
prostateUser <- as.data.frame(prostateUser)
prostateScale <- as.data.frame(prostateScale)
isTRUE(all.equal(prostateUser,prostateScale))
apply(iris[,1:4], 1, mean) # row means
apply(iris[,1:4], 2, mean) # column means
mydata <- matrix(rnorm(30), nrow=6)
mydata
apply(mydata, 1, mean) # row means
apply(mydata, 2, mean) # column means
apply(mydata, 2, mean, trim=0.2) # column means with options
myDataSet<-read.csv("myDataSet.txt", sep=",",header=T)
?qr
?qr.coef
bslash <- function(X, y) {
X <- qr(X)
qr.coef(X, y)
}
y <- prostate[,9]
regcoeff <- bslash(X, y)
a <- c(2,1,5,3)
ainverse <- c(3, -1, -5, 2)
A <- matrix(a, ncol = 2, nrow = 2)
View(A)
Ainverse <- matrix(ainverse, ncol = 2, nrow = 2)
A
Ainverse
A%*%Ainverse
Ident2 <- A %*% Ainverse
bslash(A, c(1,0))  #[1]  3 -1
bslash(A, c(0,1))  #[1] -5  2
solve(A,Ident2)
a <- matrix(c(3,1,2,1),nrow=2,ncol=2)
a
CalculateSampleCovariance <- function(x, y, verbose = TRUE) {
# Computes the sample covariance between two vectors.
#
# Args:
#   x: One of two vectors whose sample covariance is to be calculated.
#   y: The other vector. x and y must have the same length, greater than one,
#      with no missing values.
#   verbose: If TRUE, prints sample covariance; if not, not. Default is TRUE.
#
# Returns:
#   The sample covariance between x and y.
n <- length(x)
# Error handling
if (n <= 1 || n != length(y)) {
stop("Arguments x and y have invalid lengths: ",
length(x), " and ", length(y), ".")
}
if (TRUE %in% is.na(x) || TRUE %in% is.na(y)) {
stop(" Arguments x and y must not have missing values.")
}
covariance <- var(x, y)
if (verbose)
cat("Covariance = ", round(covariance, 4), ".\n", sep = "")
return(covariance)
}
oldpar <- par(no.readonly=TRUE) # record current setting
par(ask=TRUE)
head(iris)
pairs(iris[1:4], main = "Iris Pairs Plot", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
?head
pari
?pairs
s1 <- "Covariance of Petal Length with Petal Width"
s2 <- "Setosa: "
s3 <- "Versicolor: "
s4 <- "Virginica: "
CalculateSampleCovariance(iris$Petal.Length[1:50], iris$Petal.Width[1:50])
cs<-cov(iris$Petal.Length[1:50], iris$Petal.Width[1:50])
cs
text1 <- sprintf("%s %s %1.3f",s1,s2,cs)
plot(iris$Petal.Length[1:50], iris$Petal.Width[1:50])
CalculateSampleCovariance(iris$Petal.Length[51:100], iris$Petal.Width[51:100])
cver<-cov(iris$Petal.Length[51:100], iris$Petal.Width[51:100])
cver
text2 <- sprintf("%s %s %1.3f",s1,s3,cver)
plot(iris$Petal.Length[51:100], iris$Petal.Width[51:100])
CalculateSampleCovariance(iris$Petal.Length[101:150], iris$Petal.Width[101:150])
cvir<-cov(iris$Petal.Length[101:150], iris$Petal.Width[101:150])
cvir
text3 <- sprintf("%s %s %1.3f",s1,s4,cvir)
plot(iris$Petal.Length[101:150], iris$Petal.Width[101:150])
CalculateSampleCovariance(iris$Sepal.Length[1:50], iris$Sepal.Width[1:50])
cov(iris$Sepal.Length[1:50], iris$Sepal.Width[1:50])
plot(iris$Sepal.Length[1:50], iris$Sepal.Width[1:50])
CalculateSampleCovariance(seq(1,10,0.5),5*seq(1,10,0.5))
plot(seq(1,10,0.5),5*seq(1,10,0.5))
cov(seq(1,10,0.5),5*seq(1,10,0.5))
cor(seq(1,10,0.5),5*seq(1,10,0.5))
ConsoleInput <- function(){
print("please input only numbers")
x <- readline("What is the value of x?")
y <- readline("What is the value of y?")
t <- readline("What are the T values?")
v <- readline("What are the V values?")
x <- as.numeric(unlist(strsplit(x, ",")))
y <- as.numeric(unlist(strsplit(y, ",")))
t <- as.numeric(unlist(strsplit(t, ",")))
v <- as.numeric(unlist(strsplit(v, ",")))
out1 <- x + y
out2 <- t + v
alist <- list(title = "Console Input", xvalue = x, yvalue = y,sumxandy = out1,sumtandv = out2)
return(alist)
}
ConsoleInput()
knitr::opts_chunk$set(echo = TRUE)
adultData
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
adultData <- read.csv("adultData.txt", header = FALSE)
adultData
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
View(adultData)
?subset
class(y)
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
whole <- adultData[, whick(adultData$V15 ==" <=50K")]
whole <- adultData[, which(adultData$V15 ==" <=50K")]
whole <- adultData[which(adultData$V15 ==" <=50K")]
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
adultData <- read.csv("adultData.txt", header = FALSE)
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
wholeRow <- dim(whole)[1]
male <- whole[which(whole$V10) == "Male", ]
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
adultData <- read.csv("adultData.txt", header = FALSE)
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
wholeRow <- dim(whole)[1]
male <- whole[which(whole$V10 == "Male"), ]
maleRow <- dim(male)[1]
wholeRow
maleRow
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
adultData <- read.csv("adultData.txt", header = FALSE)
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
wholeRow <- dim(whole)[1]
male <- whole[which(whole$V10 == "Male"), ]
maleRow <- dim(male)[1]
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
adultData <- read.csv("adultData.txt", header = FALSE)
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
wholeRow <- dim(whole)[1]
wholeRow <- dim(whole)[1]
male <- whole[which(whole$V10 == "Female"), ]
maleRow <- dim(male)[1]
setwd("/Users/xinhuang/Google Drive/CSC 522 R Language Programming /Homework1")
adultData <- read.csv("adultData.txt", header = FALSE)
adultData <- read.csv("adultData.txt", header = FALSE)
whole <- adultData[which(adultData$V15 ==" <=50K"), ]
wholeRow <- dim(whole)[1]
wholeRow <- dim(whole)[1]
male <- whole[which(adultData$V15 ==" <=50K" & adultData$V10 == "Male"), ]
maleRow <- dim(male)[1]
